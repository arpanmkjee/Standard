<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cosmos.Extensions.Collections</name>
    </assembly>
    <members>
        <member name="T:Cosmos.Collections.SetAddRangeResult`1">
            <summary>
            Set and range result
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.Collections.SetAddRangeResult`1.#ctor(`0,System.Boolean)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Collections.SetAddRangeResult`1"/>
            </summary>
            <param name="item"></param>
            <param name="added"></param>
        </member>
        <member name="P:Cosmos.Collections.SetAddRangeResult`1.Item">
            <summary>
            Gets item
            </summary>
        </member>
        <member name="P:Cosmos.Collections.SetAddRangeResult`1.Added">
            <summary>
            Addod or not...
            </summary>
        </member>
        <member name="T:Cosmos.Disposables.CollectionDisposableObjects">
            <summary>
            Collection disposable objects
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.CollectionDisposableObjects.#ctor(System.IDisposable[])">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Disposables.CollectionDisposableObjects"/>.
            </summary>
            <param name="disposables"></param>
        </member>
        <member name="M:Cosmos.Disposables.CollectionDisposableObjects.#ctor(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Disposables.CollectionDisposableObjects"/>.
            </summary>
            <param name="disposables"></param>
        </member>
        <member name="M:Cosmos.Disposables.CollectionDisposableObjects.Dispose(System.Collections.Immutable.ImmutableQueue{System.IDisposable})">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.Disposables.CollectionDisposableObjects.Add(System.IDisposable)">
            <summary>
            Add
            </summary>
            <param name="disposable"></param>
        </member>
        <member name="M:Cosmos.Disposables.CollectionDisposableObjects.Create(System.IDisposable[])">
            <summary>
            Create a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Disposables.CollectionDisposableObjects.Create(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Create a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose</param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Disposables.DisposableObjects">
            <summary>
            Disposable objects
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableObjects.#ctor">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Disposables.DisposableObjects"/>.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.DisposableObjects.AddDisposableObject``1(``0)">
            <summary>
            Add disposable object
            </summary>
            <param name="obj"></param>
            <typeparam name="TDisposableObj"></typeparam>
        </member>
        <member name="M:Cosmos.Disposables.DisposableObjects.AddDisposableObjects(System.Object[])">
            <summary>
            Add a set of disposable objects
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Cosmos.Disposables.DisposableObjects.AddDisposableAction(System.String,System.Action)">
            <summary>
            Add disposable action
            </summary>
            <param name="name"></param>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.Disposables.DisposableObjects.AddDisposableAction(System.String,Cosmos.Disposables.DisposableAction)">
            <summary>
            Add disposable action
            </summary>
            <param name="name"></param>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.Disposables.DisposableObjects.AddDisposableAction(System.String,Cosmos.Disposables.AnonymousDisposableObject)">
            <summary>
            Add disposable action
            </summary>
            <param name="name"></param>
            <param name="anonymous"></param>
        </member>
        <member name="M:Cosmos.Disposables.DisposableObjects.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:Cosmos.Disposables.FacileDisposableObjects">
            <summary>
            Facile Disposable Objects
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.#ctor">
            <summary>
            Create a new instance of <see cref="T:Cosmos.Disposables.FacileDisposableObjects"/>.
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.AddDisposableObject``1(``0)">
            <summary>
            Add disposable object
            </summary>
            <param name="obj"></param>
            <typeparam name="TDisposableObj"></typeparam>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.AddDisposableObjects(System.Object[])">
            <summary>
            Add a set of disposable objects
            </summary>
            <param name="objs"></param>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.AddDisposableAction(System.String,System.Action)">
            <summary>
            Add disposable action
            </summary>
            <param name="name"></param>
            <param name="action"></param>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.AddDisposableAction(System.String,Cosmos.Disposables.DisposableAction)">
            <summary>
            Add disposable action
            </summary>
            <param name="name"></param>
            <param name="disposableAction"></param>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.AddDisposableAction(System.String,Cosmos.Disposables.AnonymousDisposableObject)">
            <summary>
            Add disposable action
            </summary>
            <param name="name"></param>
            <param name="anonymous"></param>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.ContainDisposableAction(System.String)">
            <summary>
            Contains disposable action
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.RemoveDisposableAction(System.String)">
            <summary>
            Remove disposable action
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.ClearDisposableActions">
            <summary>
            Clear all disposable actions
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Cosmos.Disposables.FacileDisposableObjects.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Cosmos.EnumerableFactory">
            <summary>
            Enumerable factory
            </summary>
        </member>
        <member name="M:Cosmos.EnumerableFactory.CreateList``1">
            <summary>
            Create list
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EnumerableFactory.CreateList``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Create list
            </summary>
            <param name="listParams"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EnumerableFactory.CreateReadOnlyList``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Create readonly list
            </summary>
            <param name="listParams"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Enumerables">
            <summary>
            Enumerable Utilities
            </summary>
        </member>
        <member name="M:Cosmos.Enumerables.Merge``1(System.Collections.Generic.IEnumerator{``0},System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Merge
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Enumerables.Merge``1(System.Collections.Generic.IEnumerator{``0},``0)">
            <summary>
            Merge
            </summary>
            <param name="left"></param>
            <param name="last"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Enumerables.Merge``1(``0,System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Merge
            </summary>
            <param name="first"></param>
            <param name="right"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Enumerables.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flatten
            </summary>
            <param name="inputs"></param>
            <param name="enumerableFunc"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Enumerables.Flatten(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.IEnumerable})">
            <summary>
            Flatten<br />
            将多层的集合展开并整理为单层集合
            </summary>
            <param name="inputs"></param>
            <param name="enumerate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Enumerables.Of``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Queryable page
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable">data from database</param>
            <param name="pageNumber">page number</param>
            <param name="itemCountPerPage">page size</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Enumerables.Of``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Queryable page
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">data in memory</param>
            <param name="pageNumber">page number</param>
            <param name="itemCountPerPage">page size</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Enumerables.EmptyList``1">
            <summary>
            Create an empty list
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Enumerables.Create``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Create list
            </summary>
            <param name="listParams"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Enumerables.CreateAsReadOnly``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Create readonly list
            </summary>
            <param name="listParams"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.DictionaryExtensions">
            <summary>
            Extensions for dictionary
            </summary>
            <summary>
            Extensions for dictionary
            </summary>
            <summary>
            Extensions for dictionary
            </summary>
            <summary>
            Extensions for dictionary
            </summary>
            <summary>
            Extensions for dictionary
            </summary>
            <summary>
            Extensions for dictionary
            </summary>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Get value or default
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Get value or default
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.GetValueOrDefaultCascading``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{``0,``1}},``0,``1)">
            <summary>
            Get value or default cascading
            </summary>
            <param name="dictionaries"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.GetValueOrDefaultCascading``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{``0,``1}},``0)">
            <summary>
            Get value or default cascading
            </summary>
            <param name="dictionaries"></param>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Try get value
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.TryGetValueCascading``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{``0,``1}},``0,``1@)">
            <summary>
            Try get value cascading
            </summary>
            <param name="dictionaries"></param>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.TryGetValueCascading``2(``0,``1@,System.Collections.Generic.IDictionary{``0,``1}[])">
            <summary>
            Try get value cascading
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dictionaries"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.TryGetValueCascading``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{``0,``1}},``0)">
            <summary>
            Try get value cascading
            </summary>
            <param name="dictionaries"></param>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.TryGetValueCascading``2(``0,System.Collections.Generic.IDictionary{``0,``1}[])">
            <summary>
            Try get value cascading
            </summary>
            <param name="key"></param>
            <param name="dictionaries"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.GroupByAsDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Group by as dictionary
            </summary>
            <param name="list"></param>
            <param name="keyFunc"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.GroupByAsDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Group by as dictionary
            </summary>
            <param name="list"></param>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.GroupByAsDictionaryOfDictionaries``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Group by dictionary of dictonaries
            </summary>
            <param name="list"></param>
            <param name="keyFunc1"></param>
            <param name="keyFunc2"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.GroupByAsDictionaryHash``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Group by as dictionary hash
            </summary>
            <param name="list"></param>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.WrapInReadOnlyDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Wrap in readonly dictionary
            </summary>
            <param name="dictionary"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.SelectDistinctSorted``1(System.Collections.Generic.IList{``0})">
            <summary>
            Select distinct sorted
            </summary>
            <param name="list"></param>
            <typeparam name="TObj"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.ToDictionary``2(System.Collections.Generic.IList{``1},System.Func{``1,``0})">
            <summary>
            To dictionary
            </summary>
            <param name="list"></param>
            <param name="keyFunc"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TItem"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.ToDictionary``3(System.Collections.Generic.IList{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            To dictionary
            </summary>
            <param name="list"></param>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.ToDictionary``2(System.Collections.Hashtable)">
            <summary>
            To dictionary
            </summary>
            <param name="hash"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.ToDictionaryIgnoringDuplicateKeys``3(System.Collections.Generic.IList{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            To dictionary ignore duplicate keys
            </summary>
            <param name="list"></param>
            <param name="keyFunc"></param>
            <param name="valueFunc"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.ToSortedArrayByValue``1(System.Collections.Generic.Dictionary{``0,System.Int32})">
            <summary>
            To sorted array by value
            </summary>
            <param name="list"></param>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.ToSortedArrayByKey``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            To sorted array by key
            </summary>
            <param name="list"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.ToTuple``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            To tuple...
            </summary>
            <param name="me"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.DictionaryExtensions.ToString``2(System.Collections.Generic.Dictionary{``0,``1},System.String,System.String)">
            <summary>
            To string
            </summary>
            <param name="dictionary"></param>
            <param name="linker"></param>
            <param name="separator"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.ArrayExtensions">
            <summary>
            Extensions of array
            </summary>
        </member>
        <member name="M:Cosmos.ArrayExtensions.ToSafeArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To safe array
            </summary>
            <param name="source"></param>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.Extensions.Extensions">
            <summary>
            Extensions of collection
            </summary>
            <summary>
            Extensions of collection
            </summary>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.ForEachItem``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对集合内每一项元素都进行一次操作
            </summary>
            <param name="enumerable"></param>
            <param name="action"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.AsReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将集合转换为只读集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.Merge``1(System.Collections.Generic.IEnumerator{``0},System.Collections.Generic.IEnumerator{``0})">
            <summary>
            将两个具有相同种类的元素的集合合并
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"> </param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.Merge``1(System.Collections.Generic.IEnumerator{``0},``0)">
            <summary>
            将一个元素添加到一个具有相同种类的元素的集合内
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="last"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            将多层的集合展开并整理为单层集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputs">   </param>
            <param name="enumerate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.Flatten(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.IEnumerable})">
            <summary>
            将多层的集合展开并整理为单层集合
            </summary>
            <param name="inputs"></param>
            <param name="enumerate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.FirstBasedOn``1(System.Collections.Generic.IList{``0},System.Func{``0,System.IComparable})">
            <summary>
            First based on...
            </summary>
            <param name="list"></param>
            <param name="order"></param>
            <typeparam name="TItem"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.LastBasedOn``1(System.Collections.Generic.List{``0},System.Func{``0,System.IComparable})">
            <summary>
            Last based on...
            </summary>
            <param name="list"></param>
            <param name="order"></param>
            <typeparam name="TItem"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.CountDistinct``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Count distinct
            </summary>
            <param name="list"></param>
            <param name="valCalculator"></param>
            <typeparam name="TObj"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.MoveToFirst``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Move to first
            </summary>
            <param name="source"></param>
            <param name="element"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.AddOrOverride``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Add or override
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.GetOrAddNewInstance``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Get or add new default instance
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.GetOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Get or add
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="newValueCreator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.GetOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Get or add
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.GetOrCalculate``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Get value
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="valueCalculator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.GetOrAddCalculatedInstance``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Get value
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="valueCalculator"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.GetOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Get value
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.AddDictionary``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Add dictionary into another dictionary
            </summary>
            <param name="me"></param>
            <param name="other"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TVal"></typeparam>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.Set``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Set value
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Cosmos.Extensions.CollectionJudgmentExtensions">
            <summary>
            Extensions of collection
            </summary>
        </member>
        <member name="M:Cosmos.Extensions.CollectionJudgmentExtensions.IsNull(System.Collections.IEnumerable)">
            <summary>
            判断集合是否为空
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.CollectionJudgmentExtensions.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            判断集合是否为空
            </summary>
            <param name="source">要处理的集合</param>
            <returns>为空返回 True，不为空返回 False</returns>
        </member>
        <member name="M:Cosmos.Extensions.CollectionJudgmentExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断集合是否为空
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要处理的集合</param>
            <returns>为空返回 True，不为空返回 False</returns>
        </member>
        <member name="M:Cosmos.Extensions.CollectionJudgmentExtensions.ContainsAtLeast``1(System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            检查一个集合是否拥有指定数量的成员
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="enumeration"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.CollectionJudgmentExtensions.ContainsEqualCount``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            检查两个集合是否拥有相等数量的成员
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.CollectionJudgmentExtensions.ContainsAtLeast``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            检查一个集合是否拥有指定数量的成员
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="enumeration"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.CollectionJudgmentExtensions.ContainsEqualCount``1(System.Linq.IQueryable{``0},System.Linq.IQueryable{``0})">
            <summary>
            检查两个集合是否拥有相等数量的成员
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.HashtableExtensions">
            <summary>
            Extensions for hshtable 
            </summary>
        </member>
        <member name="M:Cosmos.HashtableExtensions.ToHashSetIgnoringDuplicates``1(System.Collections.Generic.IList{``0})">
            <summary>
            To HashSet ignore duplicates
            </summary>
            <param name="list"></param>
            <typeparam name="TItem"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.HashtableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To HashSet
            </summary>
            <param name="list"></param>
            <typeparam name="TItem"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.HashtableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            To HashSet
            </summary>
            <param name="list"></param>
            <param name="ignoreDup"></param>
            <typeparam name="TItem"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.HashtableExtensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            To HashSet
            </summary>
            <param name="list"></param>
            <param name="keyFunc"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.ListExtensions">
            <summary>
            Extensions of list
            </summary>
            <summary>
            Extensions of list
            </summary>
            <summary>
            Extensions of list
            </summary>
            <summary>
            Extensions of list
            </summary>
            <summary>
            Extensions of list
            </summary>
            <summary>
            Extensions of list
            </summary>
            <summary>
            Extensions of list
            </summary>
            <summary>
            Extensions of list
            </summary>
        </member>
        <member name="M:Cosmos.ListExtensions.WrapInReadOnlyCollection``1(System.Collections.Generic.IList{``0})">
            <summary>
            Wrap in readonly connection
            </summary>
            <param name="source"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.ListExtensions.RemoveDuplicates``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove deplicates
            </summary>
            <param name="values"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.RemoveDuplicates``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Remove buplicates
            </summary>
            <param name="values"></param>
            <param name="duplicatePredicate"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TCheck"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.RemoveDuplicatesIgnoreCase(System.Collections.Generic.IList{System.String})">
            <summary>
            Remove duplicates ignore case
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.RemoveWhere``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Remove where...
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.ListExtensions.SafeRemoveRange``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            Safe remove range
            </summary>
            <param name="source"></param>
            <param name="index"></param>
            <param name="count"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.ListExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Binary search
            </summary>
            <param name="list"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.BinarySearch``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},``1)">
            <summary>
            Binary search
            </summary>
            <param name="list"></param>
            <param name="map"></param>
            <param name="value"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0)">
            <summary>
            Binary search
            </summary>
            <param name="list"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.BinarySearch``2(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Func{``0,``1},``1)">
            <summary>
            Binary search
            </summary>
            <param name="list"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="map"></param>
            <param name="value"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Binary search
            </summary>
            <param name="list"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.BinarySearch``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},``1,System.Collections.Generic.IComparer{``1})">
            <summary>
            Binary search
            </summary>
            <param name="list"></param>
            <param name="map"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Binary search
            </summary>
            <param name="list"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.BinarySearch``2(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Func{``0,``1},``1,System.Collections.Generic.IComparer{``1})">
            <summary>
            Binary search
            </summary>
            <param name="list"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="map"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Cosmos.ListExtensions.SelectDistinctSorted``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Select distinct sorted
            </summary>
            <param name="list"></param>
            <param name="valCalculator"></param>
            <typeparam name="TObj"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.SelectDistinctSortedIgnoreCase(System.Collections.Generic.IList{System.String})">
            <summary>
            Select distinct sorted ignore case
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.SelectDistinctSortedIgnoreCase(System.Collections.Generic.IList{System.String},System.Func{System.String,System.String})">
            <summary>
            Select distinct sorted ignore case
            </summary>
            <param name="list"></param>
            <param name="valCalculator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.SelectDistinctUnSorted``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Select distinct un-sorted
            </summary>
            <param name="list"></param>
            <param name="valCalculator"></param>
            <typeparam name="TObj"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.ShuffleInPlace``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffle in place
            </summary>
            <param name="items"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.ListExtensions.ShuffleInPlace``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Shuffle in place
            </summary>
            <param name="items"></param>
            <param name="times"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Cosmos.ListExtensions.ShuffleToNewList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffle to new list
            </summary>
            <param name="items"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.ShuffleToNewList``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Shuffle to new list
            </summary>
            <param name="items"></param>
            <param name="times"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.SplitInGroups``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Split in groups
            </summary>
            <param name="values"></param>
            <param name="groupSize"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.SplitInGroupsRemovingDuplicates``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Split in groups remove duplicates
            </summary>
            <param name="values"></param>
            <param name="groupSize"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.ToSortedArray``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            To sorted array
            </summary>
            <param name="source"></param>
            <param name="comparer"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.ToSortedArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            To sorted array
            </summary>
            <param name="source"></param>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ListExtensions.ToStringList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            To string list
            </summary>
            <param name="me"></param>
            <param name="stringConverter"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.ReadOnlyCollectionExtensions">
            <summary>
            ReadOnly collection extensions
            </summary>
            <summary>
            ReadOnly collection extensions
            </summary>
        </member>
        <member name="M:Cosmos.ReadOnlyCollectionExtensions.Append``1(System.Collections.Generic.IReadOnlyCollection{``0},``0)">
            <summary>
            Append
            </summary>
            <param name="source"></param>
            <param name="item"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.ReadOnlyCollectionExtensions.Empty``1">
            <summary>
            Gets empty readonly collection.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.ReadOnlyDictionaryExtensions">
            <summary>
            ReadOnly dictionary extensions
            </summary>
            <summary>
            ReadOnly dictionary extensions
            </summary>
            <summary>
            ReadOnly dictionary extensions
            </summary>
        </member>
        <member name="M:Cosmos.ReadOnlyDictionaryExtensions.Cast``4(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Cast
            </summary>
            <param name="source"></param>
            <typeparam name="TFromKey"></typeparam>
            <typeparam name="TFromValue"></typeparam>
            <typeparam name="TToKey"></typeparam>
            <typeparam name="TToValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.ReadOnlyDictionaryExtensions.Empty``2">
            <summary>
            Gets empty readonly dictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReadOnlyDictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <summary>
            Get value or default
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.ReadOnlyDictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            Get value or default
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.ReadOnlyDictionaryExtensions.GetValueOrDefaultCascading``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyDictionary{``0,``1}},``0,``1)">
            <summary>
            Get value or default cascading
            </summary>
            <param name="dictionaries"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.ReadOnlyDictionaryExtensions.GetValueOrDefaultCascading``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyDictionary{``0,``1}},``0)">
            <summary>
            Get value or default cascading
            </summary>
            <param name="dictionaries"></param>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReadOnlyDictionaryExtensions.TryGetValue``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            Try get value
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.ReadOnlyDictionaryExtensions.TryGetValueCascading``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyDictionary{``0,``1}},``0,``1@)">
            <summary>
            Try get value cascading
            </summary>
            <param name="dictionaries"></param>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.ReadOnlyDictionaryExtensions.TryGetValueCascading``2(``0,``1@,System.Collections.Generic.IReadOnlyDictionary{``0,``1}[])">
            <summary>
            Try get value cascading
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dictionaries"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReadOnlyDictionaryExtensions.TryGetValueCascading``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IReadOnlyDictionary{``0,``1}},``0)">
            <summary>
            Try get value cascading
            </summary>
            <param name="dictionaries"></param>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReadOnlyDictionaryExtensions.TryGetValueCascading``2(``0,System.Collections.Generic.IReadOnlyDictionary{``0,``1}[])">
            <summary>
            Try get value cascading
            </summary>
            <param name="key"></param>
            <param name="dictionaries"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.ReadOnlyListExtensions">
            <summary>
            ReadOnly list extensions
            </summary>
            <summary>
            ReadOnly list extensions
            </summary>
        </member>
        <member name="M:Cosmos.ReadOnlyListExtensions.AsList``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            As list
            </summary>
            <param name="list"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.ReadOnlyListExtensions.BinarySearch``1(System.Collections.Generic.IReadOnlyList{``0},``0)">
            <summary>
            Binary search
            </summary>
            <param name="list"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReadOnlyListExtensions.BinarySearch``2(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1},``1)">
            <summary>
            Binary search
            </summary>
            <param name="list"></param>
            <param name="map"></param>
            <param name="value"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReadOnlyListExtensions.BinarySearch``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,``0)">
            <summary>
            Binary search
            </summary>
            <param name="list"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReadOnlyListExtensions.BinarySearch``2(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,System.Func{``0,``1},``1)">
            <summary>
            Binary search
            </summary>
            <param name="list"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="map"></param>
            <param name="value"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReadOnlyListExtensions.BinarySearch``1(System.Collections.Generic.IReadOnlyList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Binary search
            </summary>
            <param name="list"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReadOnlyListExtensions.BinarySearch``2(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1},``1,System.Collections.Generic.IComparer{``1})">
            <summary>
            Binary search
            </summary>
            <param name="list"></param>
            <param name="map"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReadOnlyListExtensions.BinarySearch``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Binary search
            </summary>
            <param name="list"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReadOnlyListExtensions.BinarySearch``2(System.Collections.Generic.IReadOnlyList{``0},System.Int32,System.Int32,System.Func{``0,``1},``1,System.Collections.Generic.IComparer{``1})">
            <summary>
            Binary search
            </summary>
            <param name="list"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="map"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Cosmos.SetExtensions">
            <summary>
            Set extensions
            </summary>
        </member>
        <member name="M:Cosmos.SetExtensions.AddRange``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add range
            </summary>
            <param name="set"></param>
            <param name="items"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:System.Extensions">
            <summary>
            Extensions
            </summary>
        </member>
        <member name="M:System.Extensions.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Contains
            </summary>
            <param name="me"></param>
            <param name="condition"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
    </members>
</doc>
