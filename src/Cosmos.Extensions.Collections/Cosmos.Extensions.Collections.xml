<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cosmos.Extensions.Collections</name>
    </assembly>
    <members>
        <member name="M:Cosmos.Disposables.CollectionDisposableObjects.Create(System.IDisposable[])">
            <summary>
            Create a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Disposables.CollectionDisposableObjects.Create(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Create a disposable that disposes a collection of disposables.
            </summary>
            <param name="disposables">The disposables to dispose</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Enumerables.Flatten(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.IEnumerable})">
            <summary>
            将多层的集合展开并整理为单层集合
            </summary>
            <param name="inputs"></param>
            <param name="enumerate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Enumerables.Of``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable">data from database</param>
            <param name="pageNumber">page number</param>
            <param name="itemCountPerPage">page size</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Enumerables.Of``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">data in memory</param>
            <param name="pageNumber">page number</param>
            <param name="itemCountPerPage">page size</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.ForEachItem``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对集合内每一项元素都进行一次操作
            </summary>
            <param name="enumerable"></param>
            <param name="action"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.AsReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将集合转换为只读集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.Merge``1(System.Collections.Generic.IEnumerator{``0},System.Collections.Generic.IEnumerator{``0})">
            <summary>
            将两个具有相同种类的元素的集合合并
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"> </param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.Merge``1(System.Collections.Generic.IEnumerator{``0},``0)">
            <summary>
            将一个元素添加到一个具有相同种类的元素的集合内
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="last"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            将多层的集合展开并整理为单层集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputs">   </param>
            <param name="enumerate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.Flatten(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.IEnumerable})">
            <summary>
            将多层的集合展开并整理为单层集合
            </summary>
            <param name="inputs"></param>
            <param name="enumerate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.AddOrOverride``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            添加或覆盖一个值
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.GetOrAddNewInstance``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            从字典中获取数据。若不存在，则向字典中添加一个 <see cref="!:TValue"/> 新实例并返回该实例。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.GetOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            从字典中获取数据。若不存在，则通过 <see cref="!:newValueCreator"/> 获得新值插入字典并返回该值。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="newValueCreator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.GetOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            从字典中获取数据。若不存在，则将指定的新值插入字典并返回该值。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.GetOrCalculate``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            从字典中获取数据。若不存在，则通过 <see cref="!:valueCalculator"/> 获得新值并返回，新值不会更新到字典内。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="valueCalculator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.Extensions.GetOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            从字典中获取数据。若不存在，则返回 <see cref="!:TValue"/> 的默认值，该默认值不会写入字典。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.CollectionJudgmentExtensions.IsNull(System.Collections.IEnumerable)">
            <summary>
            判断集合是否为空
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.CollectionJudgmentExtensions.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            判断集合是否为空
            </summary>
            <param name="source">要处理的集合</param>
            <returns>为空返回 True，不为空返回 False</returns>
        </member>
        <member name="M:Cosmos.Extensions.CollectionJudgmentExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断集合是否为空
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要处理的集合</param>
            <returns>为空返回 True，不为空返回 False</returns>
        </member>
        <member name="M:Cosmos.Extensions.CollectionJudgmentExtensions.ContainsAtLeast``1(System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            检查一个集合是否拥有指定数量的成员
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="enumeration"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.CollectionJudgmentExtensions.ContainsEqualCount``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            检查两个集合是否拥有相等数量的成员
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="that"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.CollectionJudgmentExtensions.ContainsAtLeast``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            检查一个集合是否拥有指定数量的成员
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="enumeration"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Extensions.CollectionJudgmentExtensions.ContainsEqualCount``1(System.Linq.IQueryable{``0},System.Linq.IQueryable{``0})">
            <summary>
            检查两个集合是否拥有相等数量的成员
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="that"></param>
            <returns></returns>
        </member>
    </members>
</doc>
