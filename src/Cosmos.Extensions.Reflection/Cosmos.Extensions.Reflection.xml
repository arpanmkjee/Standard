<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cosmos.Extensions.Reflection</name>
    </assembly>
    <members>
        <member name="T:Cosmos.Exceptions.IFluentExceptionBuilder`1">
            <summary>
            Interface for fluent exception builder
            </summary>
        </member>
        <member name="P:Cosmos.Exceptions.IFluentExceptionBuilder`1.TargetType">
            <summary>
            Gets target exception's type
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.InnerException(System.Exception)">
            <summary>
            With inner exception.<br />
            This value will be used for constructor with param-name 'innerException' and 'inner' (just for <see cref="T:System.InvalidProgramException"/>).
            </summary>
            <param name="innerException"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.ParamName(System.String)">
            <summary>
            With parameter's name.<br />
            This value will be used for constructor with param-name 'paramName'.
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.Message(System.String)">
            <summary>
            With message.<br />
            This value will be used for constructor with param-name 'message'.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.ActualValue(System.Object)">
            <summary>
            Actual value.<br />
            This value will be used for constructor with param-name 'actualValue'.
            </summary>
            <param name="actualValue"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.ErrorCode(System.Int32)">
            <summary>
            Error code.<br />
            This value will be used for constructor with param-name 'errorCode'.
            </summary>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.Build">
            <summary>
            Build and return exception instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.BuildAndThrow">
            <summary>
            Build and throw exception
            </summary>
        </member>
        <member name="M:Cosmos.Exceptions.IFluentExceptionBuilder`1.BuildAndThrowAsValidationError">
            <summary>
            Build and throw exception as validation error
            </summary>
        </member>
        <member name="T:Cosmos.ReflectionExtensions">
            <summary>
            Type extensions
            </summary>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.AttributeExists``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            To judge the attribute exists or not
            </summary>
            <typeparam name="T">要检查的特性类型</typeparam>
            <param name="memberInfo">要检查的类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.AttributeNotExists``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            To judge the attribute dosn't exist or not
            </summary>
            <typeparam name="T">要检查的特性类型</typeparam>
            <param name="memberInfo">要检查的类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>是否不存在</returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Get attribute from memberinfo
            </summary>
            <typeparam name="T"></typeparam>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Get attributes from memberinfo
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <param name="info">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>存在返回第一个，不存在返回null</returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Get Attributes from memberinfo
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Get attributes from memberinfo
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="info">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>存在返回第一个，不存在返回 null</returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.GetFullName(System.Reflection.MethodInfo)">
            <summary>
            Get full name of method including type name and method name
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.ToComputeSignature(System.Reflection.MethodInfo)">
            <summary>
            To compute signature
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.DefinePoco(System.Reflection.Emit.ModuleBuilder,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Type}[])">
            <summary>
            Define poco
            </summary>
            <param name="moduleBuilder"></param>
            <param name="name"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.DefinePoco(System.Reflection.Emit.ModuleBuilder,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}})">
            <summary>
            Define poco
            </summary>
            <param name="moduleBuilder"></param>
            <param name="name"></param>
            <param name="properties"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.Exclude``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Exclude
            </summary>
            <param name="properties"></param>
            <param name="shape"></param>
            <param name="expressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.Exclude``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            Exclude
            </summary>
            <param name="properties"></param>
            <param name="shape"></param>
            <param name="expressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.Exclude``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Exclude
            </summary>
            <param name="properties"></param>
            <param name="expressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.Exclude``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Object}}})">
            <summary>
            Exclude
            </summary>
            <param name="properties"></param>
            <param name="expressions"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.ToNonNullableType(System.Type)">
            <summary>
            Get non-nullable inderlying <see cref="T:System.Type"/>
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.ToNonNullableTypeInfo(System.Reflection.TypeInfo)">
            <summary>
            Get non-nullable inderlying <see cref="M:Cosmos.ReflectionExtensions.TypeInfo(System.Object)"/>
            </summary>
            <param name="typeinfo"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.TypeInfo(System.Object)">
            <summary>
            Get object's <see cref="M:Cosmos.ReflectionExtensions.TypeInfo(System.Object)"/>
            </summary>
            <param name="object"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.ToTypeInfo(System.Type[])">
            <summary>
            Convert <see cref="T:System.Type"/> array to <see cref="M:Cosmos.ReflectionExtensions.TypeInfo(System.Object)"/> list
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets property value
            </summary>
            <param name="object">Any <see cref="T:System.Object"/></param>
            <param name="propertyName">Property name in this object</param>
            <returns>Value of the specific property in this object</returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Sets property value
            </summary>
            <param name="object"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.GetProperties(System.Type,System.Reflection.PropertyAccessType)">
            <summary>
            Get properties
            </summary>
            <param name="type"></param>
            <param name="accessType"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.GetProperties``1(System.Reflection.PropertyAccessType)">
            <summary>
            Get properties
            </summary>
            <param name="accessType"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.ToComputeSignature(System.Reflection.TypeInfo)">
            <summary>
            To compute signature
            </summary>
            <param name="typeinfo"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.ToComputeSignature(System.Type)">
            <summary>
            To compute signature
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            To judge the given type is assignable to the generic type or not
            </summary>
            <param name="givenType">给定类型</param>
            <param name="genericType">泛型类型</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.IsAssignableToGenericType(System.Reflection.TypeInfo,System.Reflection.TypeInfo)">
            <summary>
            To judge the <paramref name="givenType"/> is assignable to the <paramref name="genericType"/> or not
            </summary>
            <param name="givenType">给定类型</param>
            <param name="genericType">泛型类型</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.IsAssignableToGenericType``1(System.Type)">
            <summary>
            To judge the <paramref name="givenType"/> is assignable to the <typeparamref name="TGeneric"/> or not
            </summary>
            <typeparam name="TGeneric">泛型类型</typeparam>
            <param name="givenType">给定类型</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.IsAssignableToGenericType``1(System.Reflection.TypeInfo)">
            <summary>
            To judge the <paramref name="givenType"/> is assignable to the <typeparamref name="TGeneric"/> or not
            </summary>
            <typeparam name="TGeneric">泛型类型</typeparam>
            <param name="givenType">给定类型</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.IsGenericImplementationFor(System.Type,System.Type)">
            <summary>
            To judge the given type is assignable to the generic type or not
            </summary>
            <param name="givenType">给定类型</param>
            <param name="genericType">泛型类型</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.IsGenericImplementationFor(System.Reflection.TypeInfo,System.Reflection.TypeInfo)">
            <summary>
            To judge the <paramref name="givenType"/> is assignable to the <paramref name="genericType"/> or not
            </summary>
            <param name="givenType">给定类型</param>
            <param name="genericType">泛型类型</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.IsGenericImplementationFor``1(System.Type)">
            <summary>
            To judge the <paramref name="givenType"/> is assignable to the <typeparamref name="TGeneric"/> or not
            </summary>
            <typeparam name="TGeneric">泛型类型</typeparam>
            <param name="givenType">给定类型</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.IsGenericImplementationFor``1(System.Reflection.TypeInfo)">
            <summary>
            To judge the <paramref nae="givenType"/> is assignable to the <typeparamref name="TGeneric"/> or not
            </summary>
            <typeparam name="TGeneric">泛型类型</typeparam>
            <param name="givenType">给定类型</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.FindGenericTypeInfo(System.Reflection.TypeInfo,System.Reflection.TypeInfo)">
            <summary>
            Find typeinfo from the given type's parameters' type
            </summary>
            <param name="definition"></param>
            <param name="typeinfo"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.FindGenericType(System.Type,System.Type)">
            <summary>
            Find typeinfo from the given type's parameters' type
            </summary>
            <param name="definition"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.IsAssignableFrom``1(System.Object)">
            <summary>
            Is assignable from...
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.IsAssignableFrom(System.Object,System.Type)">
            <summary>
            Is assignable from...
            </summary>
            <param name="this"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            Is assignable from...
            </summary>
            <param name="to"></param>
            <param name="from"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.IsNumeric(System.Type)">
            <summary>
            判断指定类型是否为数值类型
            </summary>
            <param name="type">要检查的类型</param>
            <returns>是否是数值类型</returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.IsNumeric(System.Reflection.TypeInfo)">
            <summary>
            判断指定类型是否为数值类型
            </summary>
            <param name="typeInfo">要检查的类型</param>
            <returns>是否是数值类型</returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.IsNullableType(System.Type)">
            <summary>
            指示类型是否为可空类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.IsDefined``1(System.Type)">
            <summary>
            Is defined special attribute
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.IsNotDefined``1(System.Type)">
            <summary>
            Is not defined special attribute
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:Cosmos.ReflectionExtensions.PROPERTY_GET_SET_METHOD_ATTRIBUTES">
            <summary>
            Property set and property get methods require a special set of attributes.
            </summary>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.DefineAutoImplementedProperty(System.Reflection.Emit.TypeBuilder,System.String,System.Type)">
            <summary>
            Define auto implemented property
            </summary>
            <param name="typeBuilder"></param>
            <param name="name"></param>
            <param name="propertyType"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.ReflectionExtensions.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            Create instance
            </summary>
            <typeparam name="TTypeInstance"></typeparam>
            <param name="type"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.InstanceScanner`1">
            <summary>
            Instance Scanner
            </summary>
            <typeparam name="TClass"></typeparam>
        </member>
        <member name="M:Cosmos.InstanceScanner`1.#ctor">
            <summary>
            Create a new <see cref="T:Cosmos.InstanceScanner`1"/> instance.
            </summary>
        </member>
        <member name="M:Cosmos.InstanceScanner`1.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Cosmos.InstanceScanner`1"/> instance.
            </summary>
            <param name="scannerName"></param>
        </member>
        <member name="M:Cosmos.InstanceScanner`1.#ctor(System.Type)">
            <summary>
            Create a new <see cref="T:Cosmos.InstanceScanner`1"/> instance.
            </summary>
            <param name="baseType"></param>
        </member>
        <member name="M:Cosmos.InstanceScanner`1.#ctor(System.String,System.Type)">
            <summary>
            Create a new <see cref="T:Cosmos.InstanceScanner`1"/> instance.
            </summary>
            <param name="scannerName"></param>
            <param name="baseType"></param>
        </member>
        <member name="M:Cosmos.InstanceScanner`1.ScanAndReturnInstances">
            <summary>
            Scan, and return instances.
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Reflection.PropertyAccessType">
            <summary>
            Property access type
            </summary>
        </member>
        <member name="F:System.Reflection.PropertyAccessType.Getters">
            <summary>
            Getters
            </summary>
        </member>
        <member name="F:System.Reflection.PropertyAccessType.Setters">
            <summary>
            Setters
            </summary>
        </member>
        <member name="T:System.Reflection.PropertyPath">
            <summary>
            Property path
            </summary>
        </member>
        <member name="P:System.Reflection.PropertyPath.Root">
            <summary>
            Root
            </summary>
        </member>
        <member name="P:System.Reflection.PropertyPath.Path">
            <summary>
            Path
            </summary>
        </member>
        <member name="M:System.Reflection.PropertyPath.Append(System.Reflection.PropertyInfo)">
            <summary>
            Append
            </summary>
            <param name="property"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:System.Reflection.PropertyPath.Of``1">
            <summary>
            Of
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:System.Reflection.PropertyPath`1">
            <summary>
            Property path
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.Reflection.PropertyPath`1.ThenEnumerable``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
            Then enumerable
            </summary>
            <param name="expression"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:System.Reflection.PropertyPath`1.Then``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Then
            </summary>
            <param name="expression"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
    </members>
</doc>
